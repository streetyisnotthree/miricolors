<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>miricolors.net</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="miricolors.net — a glassy, early-web inspired reading experience." />
    <meta name="theme-color" content="#ffffff" />
    <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='128' height='128' viewBox='0 0 128 128'%3E%3Crect width='128' height='128' fill='%23fff'/%3E%3Cpath d='M16 32h96v64H16z' fill='%23000' opacity='.06'/%3E%3Ctext x='64' y='76' font-family='Verdana' font-size='44' text-anchor='middle' fill='%23000' opacity='.4'%3EM%3C/text%3E%3C/svg%3E" />
    <link rel="canonical" href="https://miricolors.net/" />

    <style>
      :root {
        --bg-0: #ffffff;
        --bg-1: #f2f2f2;
        --bg-2: #e6e6e6;
        --bg-3: #d9d9d9;
        --ink-0: #000000;
        --ink-1: #333333;
        --ink-2: #666666;
        --ink-3: #999999;
        --glass: rgba(255, 255, 255, 0.6);
        --glass-strong: rgba(255, 255, 255, 0.75);
        --shadow-1: 0 12px 24px rgba(0,0,0,0.12);
        --shadow-2: 0 6px 16px rgba(0,0,0,0.10);
        --border-1: 1px solid rgba(0,0,0,0.10);
        --border-2: 1px solid rgba(0,0,0,0.15);
        --radius-outer: 14px;
        --radius-inner: 10px;
        --radius-button: 8px;
        --maxw: 1080px;
      }

      * { box-sizing: border-box; }
      html, body {
        margin: 0; padding: 0;
        color: var(--ink-1);
        background:
          linear-gradient(180deg, var(--bg-0), var(--bg-1) 30%, var(--bg-2) 70%, var(--bg-3) 100%);
        font-family: "Segoe UI", Tahoma, Verdana, sans-serif;
        min-height: 100%;
      }

      .page {
        max-width: var(--maxw);
        margin: 28px auto 56px;
        padding: 0 16px;
      }

      /* Glassy header with XP/Vista sheen */
      header.site-head {
        position: sticky; top: 12px;
        z-index: 50;
        border-radius: var(--radius-outer);
        border: var(--border-2);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.88), rgba(255,255,255,0.64)),
          linear-gradient(180deg, #ffffff, #e9e9e9);
        backdrop-filter: blur(8px);
        box-shadow: var(--shadow-1);
        overflow: hidden;
      }

      /* MP3 player-style nav bar */
      .mp3bar {
        display: grid;
        grid-template-columns: 1fr auto auto;
        align-items: center;
        gap: 8px;
        padding: 8px 10px;
        border-bottom: var(--border-1);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.7), rgba(255,255,255,0.35));
      }

      .brand {
        display: flex; align-items: center; gap: 10px;
        padding: 6px 8px;
      }
      .brand-logo {
        width: 26px; height: 26px;
        border-radius: 6px;
        background:
          linear-gradient(180deg, #ffffff, #e1e1e1);
        border: var(--border-2);
        box-shadow: inset 0 2px 0 rgba(255,255,255,0.9), inset 0 -2px 0 rgba(0,0,0,0.05);
      }
      .brand-title {
        font-weight: 700;
        letter-spacing: 0.4px;
        color: var(--ink-0);
        text-shadow: 0 1px 0 #fff;
      }

      /* Equalizer pulse purely grayscale */
      .eq {
        display: inline-flex; gap: 2px; margin-left: 8px;
        height: 12px; align-items: flex-end;
      }
      .eq span {
        width: 3px; background: #666; display: inline-block;
        animation: eqIdle 1200ms ease-in-out infinite;
        border-radius: 1px;
      }
      .eq span:nth-child(2){ animation-delay: 120ms; }
      .eq span:nth-child(3){ animation-delay: 240ms; }
      .eq span:nth-child(4){ animation-delay: 360ms; }
      .eq span:nth-child(5){ animation-delay: 480ms; }
      @keyframes eqIdle {
        0%, 100% { height: 20%; }
        50% { height: 85%; }
      }

      /* Nav buttons styled like MP3 transport buttons */
      nav.mp3-controls {
        display: flex; flex-wrap: wrap; gap: 6px;
        padding: 4px 0;
      }
      .btn {
        appearance: none; border: 0;
        color: var(--ink-1);
        background:
          linear-gradient(180deg, #ffffff, #dcdcdc);
        border: var(--border-2);
        border-radius: var(--radius-button);
        box-shadow:
          inset 0 1px 0 rgba(255,255,255,0.9),
          inset 0 -1px 0 rgba(0,0,0,0.05),
          0 2px 4px rgba(0,0,0,0.08);
        padding: 6px 10px;
        font-weight: 600;
        letter-spacing: 0.2px;
        cursor: pointer;
        transition: transform 80ms ease, box-shadow 120ms ease, background 200ms ease;
        user-select: none;
      }
      .btn:hover {
        transform: translateY(-1px);
        background:
          linear-gradient(180deg, #ffffff, #e6e6e6);
        box-shadow:
          inset 0 1px 0 rgba(255,255,255,1),
          inset 0 -1px 0 rgba(0,0,0,0.06),
          0 6px 12px rgba(0,0,0,0.12);
      }
      .btn:active {
        transform: translateY(0);
        background:
          linear-gradient(180deg, #f2f2f2, #d2d2d2);
        box-shadow:
          inset 0 2px 4px rgba(0,0,0,0.12);
      }

      /* Star quick menu button */
      .star-wrap {
        display: flex; align-items: center; gap: 8px;
      }
      .star-btn {
        width: 34px; height: 34px;
        display: grid; place-items: center;
        font-size: 18px; line-height: 1;
      }

      /* Transport screen strip (like an old MP3 display) */
      .screen {
        grid-column: 1 / -1;
        margin: 0 10px 10px;
        border: var(--border-2);
        border-radius: 10px;
        background:
          linear-gradient(180deg, rgba(255,255,255,0.85), rgba(255,255,255,0.55)),
          linear-gradient(180deg, #f7f7f7, #e1e1e1);
        padding: 8px 12px;
        display: flex; align-items: center; justify-content: space-between;
        gap: 12px;
        box-shadow: inset 0 1px 0 rgba(255,255,255,0.9), inset 0 -1px 0 rgba(0,0,0,0.06);
      }
      .screen .marquee {
        overflow: hidden; white-space: nowrap;
        color: var(--ink-2);
        font-weight: 600;
        letter-spacing: 0.3px;
      }
      .marquee span {
        display: inline-block;
        padding-left: 100%;
        animation: scroll 14s linear infinite;
      }
      @keyframes scroll {
        0% { transform: translateX(0); }
        100% { transform: translateX(-100%); }
      }

      /* Main layout: left sidebar (Chapters), center (Latest), right (Coming Soon) */
      .main {
        display: grid;
        grid-template-columns: 240px 1fr 280px;
        gap: 18px;
        margin-top: 16px;
      }
      @media (max-width: 980px) {
        .main { grid-template-columns: 1fr; }
      }

      .panel {
        border-radius: var(--radius-outer);
        border: var(--border-2);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.82), rgba(255,255,255,0.52)),
          linear-gradient(180deg, #ffffff, #e9e9e9);
        backdrop-filter: blur(8px);
        box-shadow: var(--shadow-2);
        overflow: hidden;
      }
      .panel-header {
        padding: 10px 12px;
        background:
          linear-gradient(180deg, rgba(255,255,255,0.95), rgba(255,255,255,0.6));
        border-bottom: var(--border-1);
        display: flex; align-items: center; justify-content: space-between;
      }
      .panel-header h2 {
        margin: 0; font-size: 14px; letter-spacing: 0.5px; text-transform: uppercase;
        color: var(--ink-2);
      }
      .panel-body { padding: 12px; }

      /* Chapters list (empty for now) */
      .chapter-list, .log-list {
        list-style: none; margin: 0; padding: 0; display: grid; gap: 8px;
        min-height: 80px;
      }

      /* Latest Chapter center card (empty content) */
      .latest-card {
        display: grid;
        gap: 12px;
      }
      .latest-hero {
        height: 200px;
        border-radius: var(--radius-inner);
        border: var(--border-1);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.8), rgba(255,255,255,0.35)),
          linear-gradient(135deg, #f9f9f9 0%, #e9e9e9 50%, #dcdcdc 100%);
        box-shadow: inset 0 1px 0 rgba(255,255,255,0.85), inset 0 -1px 0 rgba(0,0,0,0.05);
      }

      /* Coming Soon card (intentionally no content) */
      .comingsoon {
        display: grid; gap: 10px;
      }
      .coming-tidbit {
        min-height: 120px;
        border-radius: var(--radius-inner);
        border: var(--border-1);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.85), rgba(255,255,255,0.4)),
          linear-gradient(180deg, #f6f6f6, #e2e2e2);
        box-shadow: inset 0 1px 0 rgba(255,255,255,0.85), inset 0 -1px 0 rgba(0,0,0,0.05);
      }

      footer.site-foot {
        margin-top: 22px;
        padding: 14px;
        border-radius: var(--radius-outer);
        border: var(--border-2);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.85), rgba(255,255,255,0.5)),
          linear-gradient(180deg, #ffffff, #eaeaea);
        text-align: center;
        color: var(--ink-3);
      }

      /* Star menu popup (XP/Vista window feel) */
      .modal {
        position: fixed; inset: 0; display: none; align-items: center; justify-content: center;
        background: rgba(0,0,0,0.25);
        z-index: 100;
      }
      .modal[aria-hidden="false"] { display: flex; }
      .window {
        width: min(720px, 92vw);
        border-radius: 12px;
        overflow: hidden;
        border: var(--border-2);
        background:
          linear-gradient(180deg, rgba(255,255,255,0.9), rgba(255,255,255,0.6)),
          linear-gradient(180deg, #ffffff, #e7e7e7);
        box-shadow: 0 24px 48px rgba(0,0,0,0.18);
      }
      .window-titlebar {
        padding: 10px 12px;
        background:
          linear-gradient(180deg, #fdfdfd, #dcdcdc);
        border-bottom: var(--border-1);
        display: flex; align-items: center; justify-content: space-between;
      }
      .window-title {
        margin: 0; font-weight: 700; color: var(--ink-1); letter-spacing: 0.4px;
      }
      .win-actions { display: flex; gap: 6px; }
      .icon-btn {
        width: 28px; height: 28px; border-radius: 6px; border: var(--border-2);
        background: linear-gradient(180deg, #ffffff, #dcdcdc);
        display: grid; place-items: center; cursor: pointer;
        box-shadow: inset 0 1px 0 rgba(255,255,255,0.9), inset 0 -1px 0 rgba(0,0,0,0.05);
      }
      .window-body { padding: 12px; display: grid; gap: 12px; }
      .tabs { display: flex; gap: 6px; }
      .tab {
        padding: 6px 10px; border-radius: 8px; border: var(--border-2);
        background: linear-gradient(180deg, #ffffff, #e3e3e3);
        cursor: default; font-weight: 600; color: var(--ink-2);
      }
      .columns {
        display: grid; grid-template-columns: 1fr 1fr; gap: 12px;
      }
      @media (max-width: 680px) {
        .columns { grid-template-columns: 1fr; }
      }
      .well {
        border: var(--border-1); border-radius: 8px; background: rgba(255,255,255,0.6);
        min-height: 120px; padding: 10px;
      }

      /* A11y: reduce motion */
      @media (prefers-reduced-motion: reduce) {
        .eq span { animation: none; height: 50%; }
        .marquee span { animation: none; }
        .btn, .screen { transition: none; }
      }
    </style>
  </head>
  <body>
    <div class="page">
      <header class="site-head" role="banner" aria-label="Site header">
        <div class="mp3bar">
          <div class="brand">
            <div class="brand-logo" aria-hidden="true"></div>
            <div class="brand-title">miricolors.net</div>
            <div class="eq" aria-hidden="true">
              <span></span><span></span><span></span><span></span><span></span>
            </div>
          </div>

          <nav class="mp3-controls" aria-label="Primary">
            <button class="btn nav-btn" data-link="home">Home</button>
            <button class="btn nav-btn" data-link="read">Read</button>
            <button class="btn nav-btn" data-link="archive">Archive</button>
            <button class="btn nav-btn" data-link="new-reader">New Reader?</button>
            <button class="btn nav-btn" data-link="map">Map</button>
            <button class="btn nav-btn" data-link="log">Log</button>
            <button class="btn nav-btn" data-link="search">Search</button>
            <button class="btn nav-btn" data-link="forums">Forums</button>
            <button class="btn nav-btn" data-link="credits">Credits</button>
          </nav>

          <div class="star-wrap">
            <button class="btn star-btn" id="starMenuBtn" aria-haspopup="dialog" aria-controls="starMenu" title="Quick chapters/logs">✦</button>
          </div>

          <div class="screen" aria-hidden="true">
            <div class="marquee"><span>miricolors.net — glassy early-web vibes • Windows XP/Vista sheen • grayscale gradients • hover for twinkles … </span></div>
          </div>
        </div>
      </header>

      <main class="main" role="main">
        <!-- LEFT: Chapters (empty list, no items added yet) -->
        <aside class="panel" aria-labelledby="chapters-title">
          <div class="panel-header">
            <h2 id="chapters-title">Chapters</h2>
          </div>
          <div class="panel-body">
            <ul class="chapter-list" id="chapterList" aria-live="polite" aria-label="Chapter list">
              <!-- Intentionally empty — add chapters here later -->
            </ul>
          </div>
        </aside>

        <!-- CENTER: Latest Chapter (empty hero) -->
        <section class="panel" aria-labelledby="latest-title">
          <div class="panel-header">
            <h2 id="latest-title">Latest Chapter</h2>
          </div>
          <div class="panel-body">
            <div class="latest-card">
              <div class="latest-hero" role="img" aria-label="Latest chapter preview (empty)"></div>
              <!-- Intentionally no chapter content yet -->
            </div>
          </div>
        </section>

        <!-- RIGHT: Coming Soon (no tidbit content yet) -->
        <aside class="panel" aria-labelledby="coming-title">
          <div class="panel-header">
            <h2 id="coming-title">Coming Soon</h2>
          </div>
          <div class="panel-body">
            <div class="comingsoon">
              <div class="coming-tidbit" aria-label="Next chapter tidbit (empty)"></div>
              <!-- No preview text or media yet -->
            </div>
          </div>
        </aside>
      </main>

      <footer class="site-foot" role="contentinfo">
        © <span id="year"></span> miricolors.net — All grayscale, all glass.
      </footer>
    </div>

    <!-- Star menu modal (chapters/logs quick access; intentionally empty) -->
    <div class="modal" id="starMenu" role="dialog" aria-modal="true" aria-hidden="true" aria-labelledby="starTitle">
      <div class="window">
        <div class="window-titlebar">
          <h3 class="window-title" id="starTitle">Quick Access</h3>
          <div class="win-actions">
            <button class="icon-btn" id="winMin" title="Minimize" aria-label="Minimize">▁</button>
            <button class="icon-btn" id="winClose" title="Close" aria-label="Close">✕</button>
          </div>
        </div>
        <div class="window-body">
          <div class="tabs" role="tablist" aria-label="Quick access tabs">
            <div class="tab" role="tab" aria-selected="true">Chapters</div>
            <div class="tab" role="tab" aria-selected="false">Log</div>
          </div>
          <div class="columns">
            <div class="well" aria-label="Chapters (empty)">
              <!-- Intentionally empty -->
            </div>
            <div class="well" aria-label="Logs (empty)">
              <!-- Intentionally empty -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Year
      document.getElementById('year').textContent = new Date().getFullYear();

      // Modal controls (star quick menu)
      const starBtn = document.getElementById('starMenuBtn');
      const modal = document.getElementById('starMenu');
      const winClose = document.getElementById('winClose');
      const winMin = document.getElementById('winMin');
      let minimized = false;

      function openModal() {
        modal.setAttribute('aria-hidden', 'false');
      }
      function closeModal() {
        modal.setAttribute('aria-hidden', 'true');
      }
      function toggleMin() {
        const body = modal.querySelector('.window-body');
        minimized = !minimized;
        body.style.display = minimized ? 'none' : 'grid';
      }

      starBtn.addEventListener('click', openModal);
      winClose.addEventListener('click', closeModal);
      winMin.addEventListener('click', toggleMin);
      modal.addEventListener('click', (e) => {
        if (e.target === modal) closeModal();
      });
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') closeModal();
      });

      // WebAudio twinkle system (no external files; grayscale theme preserved)
      const AudioCtx = window.AudioContext || window.webkitAudioContext;
      const ctx = AudioCtx ? new AudioCtx() : null;

      // Count reloads via localStorage
      const COUNTER_KEY = 'miricolors.reloads';
      const TWINKLE_PACK_KEY = 'miricolors.twinklePack'; // changes each reload
      let reloads = parseInt(localStorage.getItem(COUNTER_KEY) || '0', 10) + 1;
      localStorage.setItem(COUNTER_KEY, String(reloads));
      // Pick a twinkle pack each reload (so it changes)
      const twinklePack = Math.floor(Math.random() * 5); // 0..4
      localStorage.setItem(TWINKLE_PACK_KEY, String(twinklePack));

      // Twinkle definitions: vary oscillator, envelope, intervals
      function playTone({ freq=880, duration=0.14, type='sine', gain=0.12, start=0 }) {
        if (!ctx) return;
        const t0 = ctx.currentTime + start;
        const o = ctx.createOscillator();
        const g = ctx.createGain();
        o.type = type;
        o.frequency.value = freq;
        g.gain.value = 0.0001;

        // Soft XP/Vista-like glassy envelope
        const atk = duration * 0.15;
        const rel = duration * 0.35;
        g.gain.setValueAtTime(0.0001, t0);
        g.gain.exponentialRampToValueAtTime(gain, t0 + atk);
        g.gain.exponentialRampToValueAtTime(0.0001, t0 + duration - rel);

        o.connect(g); g.connect(ctx.destination);
        o.start(t0);
        o.stop(t0 + duration);
      }

      function playTwinkle() {
        if (!ctx) return;
        if (ctx.state === 'suspended') ctx.resume();

        const pack = parseInt(localStorage.getItem(TWINKLE_PACK_KEY) || '0', 10);
        const base = [660, 740, 880, 990, 1110][pack % 5];
        const type = ['sine', 'triangle', 'sine', 'triangle', 'sine'][pack % 5];

        // 2–3 note glassy sparkle
        playTone({ freq: base, duration: 0.12, type, gain: 0.10, start: 0.00 });
        playTone({ freq: base * 1.25, duration: 0.11, type, gain: 0.08, start: 0.05 });
        playTone({ freq: base * 1.5, duration: 0.10, type, gain: 0.07, start: 0.10 });
      }

      // Every 100th reload, unlock a short grayscale jingle (played on first interaction)
      const jingleUnlocked = (reloads % 100 === 0);
      let jinglePlayed = false;

      function playJingle() {
        if (!ctx || jinglePlayed) return;
        if (ctx.state === 'suspended') ctx.resume();
        jinglePlayed = true;

        // Simple arpeggio with XP-ting vibes; grayscale-safe (pure tones)
        const now = ctx.currentTime + 0.02;
        const notes = [523.25, 659.25, 783.99, 1046.5, 783.99, 659.25, 523.25]; // C-E-G-C' - G - E - C
        notes.forEach((f, i) => {
          playTone({ freq: f, duration: 0.14, type: 'sine', gain: 0.11, start: (i * 0.12) + (now - ctx.currentTime) });
        });
      }

      // Bind twinkles to nav interactions
      const navButtons = document.querySelectorAll('.nav-btn, .star-btn');
      let hoverCooldown = false;

      function hoverTwinkle() {
        if (hoverCooldown) return;
        hoverCooldown = true;
        playTwinkle();
        setTimeout(() => (hoverCooldown = false), 140); // light throttle
      }

      navButtons.forEach(btn => {
        btn.addEventListener('pointerenter', () => {
          hoverTwinkle();
          if (jingleUnlocked) playJingle(); // trigger jingle on first interaction after 100th reload
        });
        btn.addEventListener('click', () => {
          playTwinkle();
        });
        btn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') playTwinkle();
        });
      });

      // Optional: clicking anywhere near header also twinkles (subtle)
      document.querySelector('header').addEventListener('pointermove', () => {
        // Only very occasionally to avoid spam:
        if (Math.random() < 0.02) hoverTwinkle();
      });
    </script>
  </body>
</html>
